import { useState, useEffect, useRef } from "react";
import Head from "next/head";
import { useDrag } from "@use-gesture/react";
import { useSpring, animated } from "react-spring";
import styles from "../styles/Home.module.css";

export default function Home() {
  const position = {
    close: 0,
    brif: 15,
    verbose: 30,
    open: 100,
  };

  const [isOpen, setIsOpen] = useState(false);

  const containerRef = useRef();

  const [style, api] = useSpring(() => ({
    y: 0,
    top: `${100 - position.brif}vh`,
  }));

  const bind = useDrag((state) => {
    const {
      down,
      active,
      distance: [dx, dy],
      movement: [mx, my],
      cancel,
    } = state;

    // viewport height
    const vh = Math.max(
      document.documentElement.clientHeight || 0,
      window.innerHeight || 0
    );

    // hidden height when container is in brif position
    const containerHiddenHeight = -1 * (vh - (vh * position.brif) / 100);

    // the boolean that shows if container sticks to top of the view port or not
    const isTopOfViewPort =
      window.pageYOffset + containerRef.current.getBoundingClientRect().top <= -1;

    // cancel gesture and animation
    // in order to prevent container exit from top of viewport
    if (isTopOfViewPort) {
      cancel();
    }

    // it will change position if user draged container to certain position of view port
    if (!down && dy >= vh / 4) {
      setIsOpen((prev) => !prev);
    }

    // handle contaner drag animation
    if (isOpen) {
      // if user doesn't drag container to certain point to close container this will fire animation that takes back container to stick into top of the viewport 
      api.start({
        y: down && active ? containerHiddenHeight + my : containerHiddenHeight,
        top: `${100 - position.brif}vh`,
        immediate: down,
      });
    } else {
      // if user doesn't drag container to certain point to open container this will fire animation that takes back container to brif position
      api.start({
        y: down ? my : 0,
        top: `${100 - position.brif}vh`,
        immediate: down,
      });
    }
  });

  useEffect(() => {
    if (isOpen) {
      // fire animation for container to get stick to top of viewport
      api.start({
        y:
          -1 *
          Math.max(
            document.documentElement.clientHeight || 0,
            window.innerHeight || 0
          ),
        top: `${position.open}vh`,
      });
    } else {
      // fire animation for container to get back to brif position
      api.start({ y: 0, top: `${100 - position.brif}vh` });
    }
  }, [isOpen]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <animated.div
        ref={containerRef}
        style={{
          ...style,
          width: "100vw",
          height: "100vh",
          background: "#2f2f2f",
          position: "fixed",
          margin: "auto",
          borderRadius: "10px 10px 0 0",
          left: 0,
          right: 0,
        }}
      >
        <div
          {...bind()}
          style={{
            width: "100%",
            height: "50px",
            background: "#f5f5f5",
            cursor: "row-resize",
            touchAction: "none",
            borderRadius: !isOpen ? "10px 10px 0 0" : 0,
          }}
        />
        <h1 style={{ margin: "auto 10px" }}>salam</h1>
      </animated.div>
    </div>
  );
}
